
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000634  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000634  000006c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800066  00800066  000006ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001542  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e6  00000000  00000000  00001e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000beb  00000000  00000000  0000283c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  00003428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d2  00000000  00000000  000038b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ce1  00000000  00000000  00003f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00004c67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_6>
  1c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b5 01 	call	0x36a	; 0x36a <main>
  8a:	0c 94 18 03 	jmp	0x630	; 0x630 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDir>:

		break;

	case DIO_PORTD :

		PORTD = Val;
  92:	44 23       	and	r20, r20
  94:	b9 f1       	breq	.+110    	; 0x104 <DIO_SetPinDir+0x72>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	09 f0       	breq	.+2      	; 0x9c <DIO_SetPinDir+0xa>
  9a:	6b c0       	rjmp	.+214    	; 0x172 <DIO_SetPinDir+0xe0>
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	89 f0       	breq	.+34     	; 0xc2 <DIO_SetPinDir+0x30>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPinDir+0x1a>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	c9 f0       	breq	.+50     	; 0xd8 <DIO_SetPinDir+0x46>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	11 f1       	breq	.+68     	; 0xee <DIO_SetPinDir+0x5c>
  aa:	08 95       	ret
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinDir+0x26>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinDir+0x22>
  bc:	82 2b       	or	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret
  c2:	27 b3       	in	r18, 0x17	; 23
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinDir+0x3c>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinDir+0x38>
  d2:	82 2b       	or	r24, r18
  d4:	87 bb       	out	0x17, r24	; 23
  d6:	08 95       	ret
  d8:	24 b3       	in	r18, 0x14	; 20
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPinDir+0x52>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPinDir+0x4e>
  e8:	82 2b       	or	r24, r18
  ea:	84 bb       	out	0x14, r24	; 20
  ec:	08 95       	ret
  ee:	21 b3       	in	r18, 0x11	; 17
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDir+0x68>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDir+0x64>
  fe:	82 2b       	or	r24, r18
 100:	81 bb       	out	0x11, r24	; 17
 102:	08 95       	ret
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 f0       	breq	.+36     	; 0x12c <DIO_SetPinDir+0x9a>
 108:	28 f0       	brcs	.+10     	; 0x114 <DIO_SetPinDir+0x82>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	d9 f0       	breq	.+54     	; 0x144 <DIO_SetPinDir+0xb2>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	29 f1       	breq	.+74     	; 0x15c <DIO_SetPinDir+0xca>
 112:	08 95       	ret
 114:	2a b3       	in	r18, 0x1a	; 26
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_SetPinDir+0x8e>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_SetPinDir+0x8a>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	8a bb       	out	0x1a, r24	; 26
 12a:	08 95       	ret
 12c:	27 b3       	in	r18, 0x17	; 23
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_SetPinDir+0xa6>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_SetPinDir+0xa2>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	87 bb       	out	0x17, r24	; 23
 142:	08 95       	ret
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_SetPinDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_SetPinDir+0xba>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	84 bb       	out	0x14, r24	; 20
 15a:	08 95       	ret
 15c:	21 b3       	in	r18, 0x11	; 17
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_SetPinDir+0xd6>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_SetPinDir+0xd2>
 16c:	80 95       	com	r24
 16e:	82 23       	and	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret

00000174 <DIO_WritePin>:



void DIO_WritePin(uint8 Port ,uint8 Pin, uint8 Val)
{
	switch (Val)
 174:	44 23       	and	r20, r20
 176:	b9 f1       	breq	.+110    	; 0x1e6 <DIO_WritePin+0x72>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	09 f0       	breq	.+2      	; 0x17e <DIO_WritePin+0xa>
 17c:	6b c0       	rjmp	.+214    	; 0x254 <DIO_WritePin+0xe0>


	case DIO_PIN_HIGH :


		switch (Port)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	89 f0       	breq	.+34     	; 0x1a4 <DIO_WritePin+0x30>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_WritePin+0x1a>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	c9 f0       	breq	.+50     	; 0x1ba <DIO_WritePin+0x46>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	11 f1       	breq	.+68     	; 0x1d0 <DIO_WritePin+0x5c>
 18c:	08 95       	ret
		{
		case DIO_PORTA :

			SET_BIT(PORTA,Pin);
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_WritePin+0x26>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_WritePin+0x22>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27

			break;
 1a2:	08 95       	ret

		case DIO_PORTB :

			SET_BIT(PORTB,Pin);
 1a4:	28 b3       	in	r18, 0x18	; 24
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_WritePin+0x3c>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_WritePin+0x38>
 1b4:	82 2b       	or	r24, r18
 1b6:	88 bb       	out	0x18, r24	; 24

			break;
 1b8:	08 95       	ret

		case DIO_PORTC :

			SET_BIT(PORTC,Pin);
 1ba:	25 b3       	in	r18, 0x15	; 21
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_WritePin+0x52>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_WritePin+0x4e>
 1ca:	82 2b       	or	r24, r18
 1cc:	85 bb       	out	0x15, r24	; 21

			break;
 1ce:	08 95       	ret

		case DIO_PORTD :

			SET_BIT(PORTD,Pin);
 1d0:	22 b3       	in	r18, 0x12	; 18
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_WritePin+0x68>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_WritePin+0x64>
 1e0:	82 2b       	or	r24, r18
 1e2:	82 bb       	out	0x12, r24	; 18

			break;
 1e4:	08 95       	ret
		break;

		case DIO_PIN_LOW :


			switch (Port)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	91 f0       	breq	.+36     	; 0x20e <DIO_WritePin+0x9a>
 1ea:	28 f0       	brcs	.+10     	; 0x1f6 <DIO_WritePin+0x82>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	d9 f0       	breq	.+54     	; 0x226 <DIO_WritePin+0xb2>
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	29 f1       	breq	.+74     	; 0x23e <DIO_WritePin+0xca>
 1f4:	08 95       	ret
			{
			case DIO_PORTA :

				CLR_BIT(PORTA,Pin);
 1f6:	2b b3       	in	r18, 0x1b	; 27
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_WritePin+0x8e>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_WritePin+0x8a>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	8b bb       	out	0x1b, r24	; 27

				break;
 20c:	08 95       	ret

			case DIO_PORTB :

				CLR_BIT(PORTB,Pin);
 20e:	28 b3       	in	r18, 0x18	; 24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_WritePin+0xa6>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_WritePin+0xa2>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	88 bb       	out	0x18, r24	; 24

				break;
 224:	08 95       	ret

			case DIO_PORTC :

				CLR_BIT(PORTC,Pin);
 226:	25 b3       	in	r18, 0x15	; 21
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_WritePin+0xbe>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_WritePin+0xba>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	85 bb       	out	0x15, r24	; 21

				break;
 23c:	08 95       	ret

			case DIO_PORTD :

				CLR_BIT(PORTD,Pin);
 23e:	22 b3       	in	r18, 0x12	; 18
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_WritePin+0xd6>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_WritePin+0xd2>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <LCD_WriteCommand>:
#endif
	
}

void LCD_WriteCommand(uint8 cmd)
{
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RS_PIN, DIO_PIN_LOW);
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RW_PIN, DIO_PIN_LOW);
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
	
	PORTA = (cmd & 0xF0) | (PORTA & 0x0F);
 278:	8b b3       	in	r24, 0x1b	; 27
 27a:	9c 2f       	mov	r25, r28
 27c:	90 7f       	andi	r25, 0xF0	; 240
 27e:	8f 70       	andi	r24, 0x0F	; 15
 280:	89 2b       	or	r24, r25
 282:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	8f e9       	ldi	r24, 0x9F	; 159
 290:	9f e0       	ldi	r25, 0x0F	; 15
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_WriteCommand+0x3c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_WriteCommand+0x42>
 298:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
	
	PORTA = (cmd << 4) | (PORTA & 0x0F);
 2a4:	2b b3       	in	r18, 0x1b	; 27
 2a6:	30 e1       	ldi	r19, 0x10	; 16
 2a8:	c3 9f       	mul	r28, r19
 2aa:	c0 01       	movw	r24, r0
 2ac:	11 24       	eor	r1, r1
 2ae:	92 2f       	mov	r25, r18
 2b0:	9f 70       	andi	r25, 0x0F	; 15
 2b2:	89 2b       	or	r24, r25
 2b4:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	63 e0       	ldi	r22, 0x03	; 3
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 2c0:	8f e9       	ldi	r24, 0x9F	; 159
 2c2:	9f e0       	ldi	r25, 0x0F	; 15
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_WriteCommand+0x6e>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_WriteCommand+0x74>
 2ca:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	63 e0       	ldi	r22, 0x03	; 3
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 2d6:	8f e1       	ldi	r24, 0x1F	; 31
 2d8:	9e e4       	ldi	r25, 0x4E	; 78
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_WriteCommand+0x84>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_WriteCommand+0x8a>
 2e0:	00 00       	nop
	
	_delay_ms(5);
	
}
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <LCD_Init>:
	
	_delay_ms(5);
	
	#elif LCD_MODE == 4
	
		DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_RS_PIN , DIO_PIN_OUTPUT);
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_RW_PIN , DIO_PIN_OUTPUT);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_E_PIN , DIO_PIN_OUTPUT);
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
		
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D4 , DIO_PIN_OUTPUT);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	64 e0       	ldi	r22, 0x04	; 4
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D5 , DIO_PIN_OUTPUT);
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	65 e0       	ldi	r22, 0x05	; 5
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D6 , DIO_PIN_OUTPUT);
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	66 e0       	ldi	r22, 0x06	; 6
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D7 , DIO_PIN_OUTPUT);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	67 e0       	ldi	r22, 0x07	; 7
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	81 ee       	ldi	r24, 0xE1	; 225
 330:	94 e0       	ldi	r25, 0x04	; 4
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <LCD_Init+0x4c>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <LCD_Init+0x56>
 33c:	00 00       	nop
		
		_delay_ms(100);
		
		LCD_WriteCommand(0x33);
 33e:	83 e3       	ldi	r24, 0x33	; 51
 340:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
		LCD_WriteCommand(0x32);
 344:	82 e3       	ldi	r24, 0x32	; 50
 346:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
		LCD_WriteCommand(0x28);
 34a:	88 e2       	ldi	r24, 0x28	; 40
 34c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
		LCD_WriteCommand(0x0E);
 350:	8e e0       	ldi	r24, 0x0E	; 14
 352:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
        LCD_WriteCommand(0x01);
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
		LCD_WriteCommand(0x06);
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
		LCD_WriteCommand(0x02);
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 368:	08 95       	ret

0000036a <main>:
#include "LCD.h"


int main(void)
{
	UART_Init();
 36a:	0e 94 df 02 	call	0x5be	; 0x5be <UART_Init>
	LCD_Init();
 36e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_Init>
	UART_SendString("Hello");
 372:	80 e6       	ldi	r24, 0x60	; 96
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 f6 02 	call	0x5ec	; 0x5ec <UART_SendString>
 37a:	ff cf       	rjmp	.-2      	; 0x37a <main+0x10>

0000037c <__vector_11>:
 TCCR2 |=0x6A;


 }
 void PWM2_Generate(uint32 duty_cycle){
  OCR2=((duty_cycle*256)*100)-1;
 37c:	1f 92       	push	r1
 37e:	0f 92       	push	r0
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	2f 93       	push	r18
 388:	3f 93       	push	r19
 38a:	4f 93       	push	r20
 38c:	5f 93       	push	r21
 38e:	6f 93       	push	r22
 390:	7f 93       	push	r23
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	af 93       	push	r26
 398:	bf 93       	push	r27
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
 39e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <counter.1682>
 3a2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <counter.1682+0x1>
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <counter.1682+0x1>
 3ac:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <counter.1682>
 3b0:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <Num_OverFlow>
 3b4:	30 91 86 00 	lds	r19, 0x0086	; 0x800086 <Num_OverFlow+0x1>
 3b8:	82 17       	cp	r24, r18
 3ba:	93 07       	cpc	r25, r19
 3bc:	61 f4       	brne	.+24     	; 0x3d6 <__vector_11+0x5a>
 3be:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <Init_Value>
 3c2:	82 bf       	out	0x32, r24	; 50
 3c4:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <counter.1682+0x1>
 3c8:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <counter.1682>
 3cc:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <pp>
 3d0:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <pp+0x1>
 3d4:	09 95       	icall
 3d6:	ff 91       	pop	r31
 3d8:	ef 91       	pop	r30
 3da:	bf 91       	pop	r27
 3dc:	af 91       	pop	r26
 3de:	9f 91       	pop	r25
 3e0:	8f 91       	pop	r24
 3e2:	7f 91       	pop	r23
 3e4:	6f 91       	pop	r22
 3e6:	5f 91       	pop	r21
 3e8:	4f 91       	pop	r20
 3ea:	3f 91       	pop	r19
 3ec:	2f 91       	pop	r18
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <__vector_7>:
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	2f 93       	push	r18
 404:	3f 93       	push	r19
 406:	4f 93       	push	r20
 408:	5f 93       	push	r21
 40a:	6f 93       	push	r22
 40c:	7f 93       	push	r23
 40e:	8f 93       	push	r24
 410:	9f 93       	push	r25
 412:	af 93       	push	r26
 414:	bf 93       	push	r27
 416:	ef 93       	push	r30
 418:	ff 93       	push	r31
 41a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 41e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 422:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <__data_end+0x2>
 426:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <__data_end+0x3>
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	a1 1d       	adc	r26, r1
 42e:	b1 1d       	adc	r27, r1
 430:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 434:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
 438:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <__data_end+0x2>
 43c:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <__data_end+0x3>
 440:	40 91 7f 00 	lds	r20, 0x007F	; 0x80007f <Compare_Match>
 444:	50 91 80 00 	lds	r21, 0x0080	; 0x800080 <Compare_Match+0x1>
 448:	60 91 81 00 	lds	r22, 0x0081	; 0x800081 <Compare_Match+0x2>
 44c:	70 91 82 00 	lds	r23, 0x0082	; 0x800082 <Compare_Match+0x3>
 450:	84 17       	cp	r24, r20
 452:	95 07       	cpc	r25, r21
 454:	a6 07       	cpc	r26, r22
 456:	b7 07       	cpc	r27, r23
 458:	69 f4       	brne	.+26     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 45a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
 45e:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x1>
 462:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end+0x2>
 466:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x3>
 46a:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <timer1_ptr>
 46e:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <timer1_ptr+0x1>
 472:	09 95       	icall
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	7f 91       	pop	r23
 482:	6f 91       	pop	r22
 484:	5f 91       	pop	r21
 486:	4f 91       	pop	r20
 488:	3f 91       	pop	r19
 48a:	2f 91       	pop	r18
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <__vector_9>:
 }

 ISR(TIMER1_OVF_vect){
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	8f 93       	push	r24
 4a2:	9f 93       	push	r25
 Timer_Numer_Overfloe ++;
 4a4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <Timer_Numer_Overfloe>
 4a8:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <Timer_Numer_Overfloe+0x1>
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <Timer_Numer_Overfloe+0x1>
 4b2:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <Timer_Numer_Overfloe>
 }
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <__vector_6>:

 ISR(TIMER1_CAPT_vect){
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	2f 93       	push	r18
 4d0:	3f 93       	push	r19
 4d2:	4f 93       	push	r20
 4d4:	5f 93       	push	r21
 4d6:	6f 93       	push	r22
 4d8:	7f 93       	push	r23
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
 4de:	af 93       	push	r26
 4e0:	bf 93       	push	r27
 Cap_Counter++;
 4e2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Cap_Counter>
 4e6:	8f 5f       	subi	r24, 0xFF	; 255
 4e8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Cap_Counter>
 if(Cap_Counter == 1){
 4ec:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Cap_Counter>
 4f0:	81 30       	cpi	r24, 0x01	; 1
 4f2:	a1 f4       	brne	.+40     	; 0x51c <__vector_6+0x58>
 ICU_ReadCaptureVal_1=ICR1;
 4f4:	86 b5       	in	r24, 0x26	; 38
 4f6:	97 b5       	in	r25, 0x27	; 39
 4f8:	a0 e0       	ldi	r26, 0x00	; 0
 4fa:	b0 e0       	ldi	r27, 0x00	; 0
 4fc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <ICU_ReadCaptureVal_1>
 500:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <ICU_ReadCaptureVal_1+0x1>
 504:	a0 93 77 00 	sts	0x0077, r26	; 0x800077 <ICU_ReadCaptureVal_1+0x2>
 508:	b0 93 78 00 	sts	0x0078, r27	; 0x800078 <ICU_ReadCaptureVal_1+0x3>
 CLR_BIT(TCCR1B,6);
 50c:	8e b5       	in	r24, 0x2e	; 46
 50e:	8f 7b       	andi	r24, 0xBF	; 191
 510:	8e bd       	out	0x2e, r24	; 46
 Timer_Numer_Overfloe=0;
 512:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <Timer_Numer_Overfloe+0x1>
 516:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <Timer_Numer_Overfloe>
 51a:	42 c0       	rjmp	.+132    	; 0x5a0 <__vector_6+0xdc>
 }else if(Cap_Counter ==2){
 51c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Cap_Counter>
 520:	82 30       	cpi	r24, 0x02	; 2
 522:	e1 f4       	brne	.+56     	; 0x55c <__vector_6+0x98>
 ICU_ReadCaptureVal_2=ICR1+ (Timer_Numer_Overfloe*65535);
 524:	46 b5       	in	r20, 0x26	; 38
 526:	57 b5       	in	r21, 0x27	; 39
 528:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <Timer_Numer_Overfloe>
 52c:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <Timer_Numer_Overfloe+0x1>
 530:	af ef       	ldi	r26, 0xFF	; 255
 532:	bf ef       	ldi	r27, 0xFF	; 255
 534:	0e 94 09 03 	call	0x612	; 0x612 <__umulhisi3>
 538:	dc 01       	movw	r26, r24
 53a:	cb 01       	movw	r24, r22
 53c:	84 0f       	add	r24, r20
 53e:	95 1f       	adc	r25, r21
 540:	a1 1d       	adc	r26, r1
 542:	b1 1d       	adc	r27, r1
 544:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <ICU_ReadCaptureVal_2>
 548:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <ICU_ReadCaptureVal_2+0x1>
 54c:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <ICU_ReadCaptureVal_2+0x2>
 550:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <ICU_ReadCaptureVal_2+0x3>
 SET_BIT(TCCR1B,6); //to detict rising
 554:	8e b5       	in	r24, 0x2e	; 46
 556:	80 64       	ori	r24, 0x40	; 64
 558:	8e bd       	out	0x2e, r24	; 46
 55a:	22 c0       	rjmp	.+68     	; 0x5a0 <__vector_6+0xdc>
 }else if(Cap_Counter == 3){
 55c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Cap_Counter>
 560:	83 30       	cpi	r24, 0x03	; 3
 562:	f1 f4       	brne	.+60     	; 0x5a0 <__vector_6+0xdc>
 ICU_ReadCaptureVal_3 = ICR1 + (Timer_Numer_Overfloe*65535);
 564:	46 b5       	in	r20, 0x26	; 38
 566:	57 b5       	in	r21, 0x27	; 39
 568:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <Timer_Numer_Overfloe>
 56c:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <Timer_Numer_Overfloe+0x1>
 570:	af ef       	ldi	r26, 0xFF	; 255
 572:	bf ef       	ldi	r27, 0xFF	; 255
 574:	0e 94 09 03 	call	0x612	; 0x612 <__umulhisi3>
 578:	dc 01       	movw	r26, r24
 57a:	cb 01       	movw	r24, r22
 57c:	84 0f       	add	r24, r20
 57e:	95 1f       	adc	r25, r21
 580:	a1 1d       	adc	r26, r1
 582:	b1 1d       	adc	r27, r1
 584:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <ICU_ReadCaptureVal_3>
 588:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <ICU_ReadCaptureVal_3+0x1>
 58c:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <ICU_ReadCaptureVal_3+0x2>
 590:	b0 93 70 00 	sts	0x0070, r27	; 0x800070 <ICU_ReadCaptureVal_3+0x3>
 CLR_BIT(TCCR1B,6);
 594:	8e b5       	in	r24, 0x2e	; 46
 596:	8f 7b       	andi	r24, 0xBF	; 191
 598:	8e bd       	out	0x2e, r24	; 46
 CLR_BIT(TIMSK,5); //close interrupt till end calculation
 59a:	89 b7       	in	r24, 0x39	; 57
 59c:	8f 7d       	andi	r24, 0xDF	; 223
 59e:	89 bf       	out	0x39, r24	; 57
 }
 5a0:	bf 91       	pop	r27
 5a2:	af 91       	pop	r26
 5a4:	9f 91       	pop	r25
 5a6:	8f 91       	pop	r24
 5a8:	7f 91       	pop	r23
 5aa:	6f 91       	pop	r22
 5ac:	5f 91       	pop	r21
 5ae:	4f 91       	pop	r20
 5b0:	3f 91       	pop	r19
 5b2:	2f 91       	pop	r18
 5b4:	0f 90       	pop	r0
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	0f 90       	pop	r0
 5ba:	1f 90       	pop	r1
 5bc:	18 95       	reti

000005be <UART_Init>:
 }
 uint8 UART_ReceiveByte(void){
	uint8 data=0;
	while(GET_BIT(UCSRA,7)==0);
	data=UDR;
 }
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	83 e0       	ldi	r24, 0x03	; 3
 5c4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	61 e0       	ldi	r22, 0x01	; 1
 5cc:	83 e0       	ldi	r24, 0x03	; 3
 5ce:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 5d2:	8a b1       	in	r24, 0x0a	; 10
 5d4:	88 61       	ori	r24, 0x18	; 24
 5d6:	8a b9       	out	0x0a, r24	; 10
 5d8:	80 b5       	in	r24, 0x20	; 32
 5da:	86 68       	ori	r24, 0x86	; 134
 5dc:	80 bd       	out	0x20, r24	; 32
 5de:	87 e6       	ldi	r24, 0x67	; 103
 5e0:	89 b9       	out	0x09, r24	; 9
 5e2:	08 95       	ret

000005e4 <UART_SendByte>:
 5e4:	5d 9b       	sbis	0x0b, 5	; 11
 5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <UART_SendByte>
 5e8:	8c b9       	out	0x0c, r24	; 12
 5ea:	08 95       	ret

000005ec <UART_SendString>:

 void UART_SendString(uint8* str){
 5ec:	0f 93       	push	r16
 5ee:	1f 93       	push	r17
 5f0:	cf 93       	push	r28
	uint8 i =0;
	while(str != '\0'){
 5f2:	00 97       	sbiw	r24, 0x00	; 0
 5f4:	51 f0       	breq	.+20     	; 0x60a <UART_SendString+0x1e>
 5f6:	8c 01       	movw	r16, r24
 5f8:	c0 e0       	ldi	r28, 0x00	; 0
		UART_SendByte(str[i]);
 5fa:	f8 01       	movw	r30, r16
 5fc:	ec 0f       	add	r30, r28
 5fe:	f1 1d       	adc	r31, r1
 600:	80 81       	ld	r24, Z
 602:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <UART_SendByte>
		i++;
 606:	cf 5f       	subi	r28, 0xFF	; 255
 608:	f8 cf       	rjmp	.-16     	; 0x5fa <UART_SendString+0xe>
	}
 }
 60a:	cf 91       	pop	r28
 60c:	1f 91       	pop	r17
 60e:	0f 91       	pop	r16
 610:	08 95       	ret

00000612 <__umulhisi3>:
 612:	a2 9f       	mul	r26, r18
 614:	b0 01       	movw	r22, r0
 616:	b3 9f       	mul	r27, r19
 618:	c0 01       	movw	r24, r0
 61a:	a3 9f       	mul	r26, r19
 61c:	70 0d       	add	r23, r0
 61e:	81 1d       	adc	r24, r1
 620:	11 24       	eor	r1, r1
 622:	91 1d       	adc	r25, r1
 624:	b2 9f       	mul	r27, r18
 626:	70 0d       	add	r23, r0
 628:	81 1d       	adc	r24, r1
 62a:	11 24       	eor	r1, r1
 62c:	91 1d       	adc	r25, r1
 62e:	08 95       	ret

00000630 <_exit>:
 630:	f8 94       	cli

00000632 <__stop_program>:
 632:	ff cf       	rjmp	.-2      	; 0x632 <__stop_program>
