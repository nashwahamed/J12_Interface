
SamrtHomeMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000003ca  0000043e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000046a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e03  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088b  00000000  00000000  000013d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000737  00000000  00000000  00001c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00002398  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e4  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004a5  00000000  00000000  00002a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002eb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
  7a:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPinDir>:

		break;

		case DIO_PORTD :

		SET_BIT(PORTD,Pin);
  82:	44 23       	and	r20, r20
  84:	b9 f1       	breq	.+110    	; 0xf4 <DIO_SetPinDir+0x72>
  86:	41 30       	cpi	r20, 0x01	; 1
  88:	09 f0       	breq	.+2      	; 0x8c <DIO_SetPinDir+0xa>
  8a:	6b c0       	rjmp	.+214    	; 0x162 <DIO_SetPinDir+0xe0>
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	89 f0       	breq	.+34     	; 0xb2 <DIO_SetPinDir+0x30>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_SetPinDir+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	c9 f0       	breq	.+50     	; 0xc8 <DIO_SetPinDir+0x46>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	11 f1       	breq	.+68     	; 0xde <DIO_SetPinDir+0x5c>
  9a:	08 95       	ret
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDir+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDir+0x22>
  ac:	82 2b       	or	r24, r18
  ae:	8a bb       	out	0x1a, r24	; 26
  b0:	08 95       	ret
  b2:	27 b3       	in	r18, 0x17	; 23
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDir+0x3c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDir+0x38>
  c2:	82 2b       	or	r24, r18
  c4:	87 bb       	out	0x17, r24	; 23
  c6:	08 95       	ret
  c8:	24 b3       	in	r18, 0x14	; 20
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPinDir+0x52>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPinDir+0x4e>
  d8:	82 2b       	or	r24, r18
  da:	84 bb       	out	0x14, r24	; 20
  dc:	08 95       	ret
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_SetPinDir+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_SetPinDir+0x64>
  ee:	82 2b       	or	r24, r18
  f0:	81 bb       	out	0x11, r24	; 17
  f2:	08 95       	ret
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 f0       	breq	.+36     	; 0x11c <DIO_SetPinDir+0x9a>
  f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_SetPinDir+0x82>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	d9 f0       	breq	.+54     	; 0x134 <DIO_SetPinDir+0xb2>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	29 f1       	breq	.+74     	; 0x14c <DIO_SetPinDir+0xca>
 102:	08 95       	ret
 104:	2a b3       	in	r18, 0x1a	; 26
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPinDir+0x8e>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPinDir+0x8a>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26
 11a:	08 95       	ret
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPinDir+0xa6>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPinDir+0xa2>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	87 bb       	out	0x17, r24	; 23
 132:	08 95       	ret
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_SetPinDir+0xbe>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_SetPinDir+0xba>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
 14c:	21 b3       	in	r18, 0x11	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_SetPinDir+0xd6>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_SetPinDir+0xd2>
 15c:	80 95       	com	r24
 15e:	82 23       	and	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
 162:	08 95       	ret

00000164 <DIO_WritePin>:
 164:	44 23       	and	r20, r20
 166:	b9 f1       	breq	.+110    	; 0x1d6 <DIO_WritePin+0x72>
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	09 f0       	breq	.+2      	; 0x16e <DIO_WritePin+0xa>
 16c:	6b c0       	rjmp	.+214    	; 0x244 <DIO_WritePin+0xe0>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	89 f0       	breq	.+34     	; 0x194 <DIO_WritePin+0x30>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_WritePin+0x1a>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	c9 f0       	breq	.+50     	; 0x1aa <DIO_WritePin+0x46>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	11 f1       	breq	.+68     	; 0x1c0 <DIO_WritePin+0x5c>
 17c:	08 95       	ret
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_WritePin+0x26>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_WritePin+0x22>
 18e:	82 2b       	or	r24, r18
 190:	8b bb       	out	0x1b, r24	; 27
 192:	08 95       	ret
 194:	28 b3       	in	r18, 0x18	; 24
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_WritePin+0x3c>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_WritePin+0x38>
 1a4:	82 2b       	or	r24, r18
 1a6:	88 bb       	out	0x18, r24	; 24
 1a8:	08 95       	ret
 1aa:	25 b3       	in	r18, 0x15	; 21
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_WritePin+0x52>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_WritePin+0x4e>
 1ba:	82 2b       	or	r24, r18
 1bc:	85 bb       	out	0x15, r24	; 21
 1be:	08 95       	ret
 1c0:	22 b3       	in	r18, 0x12	; 18
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_WritePin+0x68>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_WritePin+0x64>
 1d0:	82 2b       	or	r24, r18
 1d2:	82 bb       	out	0x12, r24	; 18
 1d4:	08 95       	ret
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 f0       	breq	.+36     	; 0x1fe <DIO_WritePin+0x9a>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <DIO_WritePin+0x82>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	d9 f0       	breq	.+54     	; 0x216 <DIO_WritePin+0xb2>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	29 f1       	breq	.+74     	; 0x22e <DIO_WritePin+0xca>
 1e4:	08 95       	ret
 1e6:	2b b3       	in	r18, 0x1b	; 27
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_WritePin+0x8e>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_WritePin+0x8a>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	8b bb       	out	0x1b, r24	; 27
 1fc:	08 95       	ret
 1fe:	28 b3       	in	r18, 0x18	; 24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_WritePin+0xa6>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_WritePin+0xa2>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	88 bb       	out	0x18, r24	; 24
 214:	08 95       	ret
 216:	25 b3       	in	r18, 0x15	; 21
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_WritePin+0xbe>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_WritePin+0xba>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	85 bb       	out	0x15, r24	; 21
 22c:	08 95       	ret
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_WritePin+0xd6>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_WritePin+0xd2>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <DIO_TogglePin>:
		default:
		break;
	}
}
void DIO_TogglePin(uint8 port,uint8 pin){
	switch(port){
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	89 f0       	breq	.+34     	; 0x26c <DIO_TogglePin+0x26>
 24a:	28 f0       	brcs	.+10     	; 0x256 <DIO_TogglePin+0x10>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	c9 f0       	breq	.+50     	; 0x282 <DIO_TogglePin+0x3c>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	11 f1       	breq	.+68     	; 0x298 <DIO_TogglePin+0x52>
 254:	08 95       	ret
		case DIO_PORTA:
		Toggle_BIT(PORTA,pin);
 256:	2b b3       	in	r18, 0x1b	; 27
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_TogglePin+0x1c>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_TogglePin+0x18>
 266:	82 27       	eor	r24, r18
 268:	8b bb       	out	0x1b, r24	; 27
		break;
 26a:	08 95       	ret

		case DIO_PORTB:
		Toggle_BIT(PORTB,pin);
 26c:	28 b3       	in	r18, 0x18	; 24
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_TogglePin+0x32>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_TogglePin+0x2e>
 27c:	82 27       	eor	r24, r18
 27e:	88 bb       	out	0x18, r24	; 24
		break;
 280:	08 95       	ret

		case DIO_PORTC:
		Toggle_BIT(PORTC,pin);
 282:	25 b3       	in	r18, 0x15	; 21
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_TogglePin+0x48>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_TogglePin+0x44>
 292:	82 27       	eor	r24, r18
 294:	85 bb       	out	0x15, r24	; 21
		break;
 296:	08 95       	ret

		case DIO_PORTD:
		Toggle_BIT(PORTD,pin);
 298:	22 b3       	in	r18, 0x12	; 18
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_TogglePin+0x5e>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_TogglePin+0x5a>
 2a8:	82 27       	eor	r24, r18
 2aa:	82 bb       	out	0x12, r24	; 18
 2ac:	08 95       	ret

000002ae <main>:
#define  F_CPU 16000000
#include <util/delay.h>

int main(void)
{
	UART_Init();
 2ae:	0e 94 b2 01 	call	0x364	; 0x364 <UART_Init>
    uint8 tx_data=0, rx_data=0;
	DIO_SetPinDir(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
 2b2:	41 e0       	ldi	r20, 0x01	; 1
 2b4:	62 e0       	ldi	r22, 0x02	; 2
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTC,DIO_PIN3,DIO_PIN_OUTPUT);
 2bc:	41 e0       	ldi	r20, 0x01	; 1
 2be:	63 e0       	ldi	r22, 0x03	; 3
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
	SPI_Master_Init();
 2c6:	0e 94 90 01 	call	0x320	; 0x320 <SPI_Master_Init>
	SPI_Master_InitTrans();
 2ca:	0e 94 a7 01 	call	0x34e	; 0x34e <SPI_Master_InitTrans>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	2f ef       	ldi	r18, 0xFF	; 255
 2d0:	83 ed       	ldi	r24, 0xD3	; 211
 2d2:	90 e3       	ldi	r25, 0x30	; 48
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x26>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x30>
 2de:	00 00       	nop
	_delay_ms(1000);
    while (1) 
    {
		UART_SendString("Press l to On/Off Led or b to On/Off Buzzer");
 2e0:	80 e6       	ldi	r24, 0x60	; 96
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 cd 01 	call	0x39a	; 0x39a <UART_SendString>
		tx_data=UART_ReceiveByte();
 2e8:	0e 94 c9 01 	call	0x392	; 0x392 <UART_ReceiveByte>
 2ec:	c8 2f       	mov	r28, r24
		rx_data=SPI_TranSiver(tx_data);
 2ee:	0e 94 ad 01 	call	0x35a	; 0x35a <SPI_TranSiver>
		if(tx_data=='l'){
 2f2:	cc 36       	cpi	r28, 0x6C	; 108
 2f4:	29 f4       	brne	.+10     	; 0x300 <main+0x52>
			DIO_TogglePin(DIO_PORTC,DIO_PIN2);
 2f6:	62 e0       	ldi	r22, 0x02	; 2
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	0e 94 23 01 	call	0x246	; 0x246 <DIO_TogglePin>
 2fe:	06 c0       	rjmp	.+12     	; 0x30c <main+0x5e>
			tx_data=0;
		}
		if(tx_data=='b'){
 300:	c2 36       	cpi	r28, 0x62	; 98
 302:	21 f4       	brne	.+8      	; 0x30c <main+0x5e>
			DIO_TogglePin(DIO_PORTC,DIO_PIN3);
 304:	63 e0       	ldi	r22, 0x03	; 3
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	0e 94 23 01 	call	0x246	; 0x246 <DIO_TogglePin>
 30c:	2f ef       	ldi	r18, 0xFF	; 255
 30e:	83 ed       	ldi	r24, 0xD3	; 211
 310:	90 e3       	ldi	r25, 0x30	; 48
 312:	21 50       	subi	r18, 0x01	; 1
 314:	80 40       	sbci	r24, 0x00	; 0
 316:	90 40       	sbci	r25, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <main+0x64>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x6e>
 31c:	00 00       	nop
 31e:	e0 cf       	rjmp	.-64     	; 0x2e0 <main+0x32>

00000320 <SPI_Master_Init>:
 void SPI_Master_InitTrans(void){
 DIO_WritePin(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
 }
 //terminate transimition
 void SPI_Master_TerTrans(void){
  DIO_WritePin(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	64 e0       	ldi	r22, 0x04	; 4
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	65 e0       	ldi	r22, 0x05	; 5
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	66 e0       	ldi	r22, 0x06	; 6
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 33e:	41 e0       	ldi	r20, 0x01	; 1
 340:	67 e0       	ldi	r22, 0x07	; 7
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 348:	83 e5       	ldi	r24, 0x53	; 83
 34a:	8d b9       	out	0x0d, r24	; 13
 34c:	08 95       	ret

0000034e <SPI_Master_InitTrans>:
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	64 e0       	ldi	r22, 0x04	; 4
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
 358:	08 95       	ret

0000035a <SPI_TranSiver>:
 }
 //transmite and receive
 uint8 SPI_TranSiver(uint8 trans_data){
 uint8 rec_data=0;
 SPI ->SPDR=trans_data;//data need to be send
 35a:	8f b9       	out	0x0f, r24	; 15

 while(GET_BIT(SPI->SPSR,7)==0);//once 1 means transmite done
 35c:	77 9b       	sbis	0x0e, 7	; 14
 35e:	fe cf       	rjmp	.-4      	; 0x35c <SPI_TranSiver+0x2>

 rec_data=SPI->SPDR;
 360:	8f b1       	in	r24, 0x0f	; 15
 return rec_data;
 362:	08 95       	ret

00000364 <UART_Init>:
 #include "UART.h"

 void UART_Init(void){
 uint32 BR_Value=0;

 DIO_SetPinDir(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);
 364:	40 e0       	ldi	r20, 0x00	; 0
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 DIO_SetPinDir(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>

 UCSRB |= 0x18;//no interrup enabled only trX Rrx
 378:	8a b1       	in	r24, 0x0a	; 10
 37a:	88 61       	ori	r24, 0x18	; 24
 37c:	8a b9       	out	0x0a, r24	; 10

 UCSRC |= 0x86 ;//8 bit use as ucsr
 37e:	80 b5       	in	r24, 0x20	; 32
 380:	86 68       	ori	r24, 0x86	; 134
 382:	80 bd       	out	0x20, r24	; 32

 //equation boadrate Fosc/(BR*16)-1 =((16000000)/(9600 * 16))-1;

 BR_Value=((160000)/(96 * 16))-1;
 UBRRL = BR_Value;
 384:	87 e6       	ldi	r24, 0x67	; 103
 386:	89 b9       	out	0x09, r24	; 9
 388:	08 95       	ret

0000038a <UART_SendByte>:

 }
 void UART_SendByte(uint8 data){
 //polling on the flag
 while(GET_BIT(UCSRA,5)==0);
 38a:	5d 9b       	sbis	0x0b, 5	; 11
 38c:	fe cf       	rjmp	.-4      	; 0x38a <UART_SendByte>

 UDR =data;
 38e:	8c b9       	out	0x0c, r24	; 12
 390:	08 95       	ret

00000392 <UART_ReceiveByte>:
 }
 uint8 UART_ReceiveByte(void){
	uint8 data=0;
	while(GET_BIT(UCSRA,7)==0);
 392:	5f 9b       	sbis	0x0b, 7	; 11
 394:	fe cf       	rjmp	.-4      	; 0x392 <UART_ReceiveByte>
	data=UDR;
 396:	8c b1       	in	r24, 0x0c	; 12
	return data;
 }
 398:	08 95       	ret

0000039a <UART_SendString>:

 void UART_SendString(uint8* str){
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	fc 01       	movw	r30, r24
	uint8 i =0;
	while(str[i] != '\0'){
 3a2:	80 81       	ld	r24, Z
 3a4:	88 23       	and	r24, r24
 3a6:	59 f0       	breq	.+22     	; 0x3be <UART_SendString+0x24>
 3a8:	8f 01       	movw	r16, r30
 3aa:	c0 e0       	ldi	r28, 0x00	; 0
		UART_SendByte(str[i]);
 3ac:	0e 94 c5 01 	call	0x38a	; 0x38a <UART_SendByte>
		i++;
 3b0:	cf 5f       	subi	r28, 0xFF	; 255
	return data;
 }

 void UART_SendString(uint8* str){
	uint8 i =0;
	while(str[i] != '\0'){
 3b2:	f8 01       	movw	r30, r16
 3b4:	ec 0f       	add	r30, r28
 3b6:	f1 1d       	adc	r31, r1
 3b8:	80 81       	ld	r24, Z
 3ba:	81 11       	cpse	r24, r1
 3bc:	f7 cf       	rjmp	.-18     	; 0x3ac <UART_SendString+0x12>
		UART_SendByte(str[i]);
		i++;
	}
 }
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	08 95       	ret

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>
