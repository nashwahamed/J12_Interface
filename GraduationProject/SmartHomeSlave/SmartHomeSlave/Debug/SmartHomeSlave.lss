
SmartHomeSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000368  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  000003dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eea  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088c  00000000  00000000  0000147a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a9  00000000  00000000  00001d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  000025b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d5  00000000  00000000  00002860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000623  00000000  00000000  00002e35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 37       	cpi	r26, 0x72	; 114
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
  74:	0c 94 b2 01 	jmp	0x364	; 0x364 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPinDir>:

		break;

		case DIO_PORTD :

		SET_BIT(PORTD,Pin);
  7c:	44 23       	and	r20, r20
  7e:	b9 f1       	breq	.+110    	; 0xee <DIO_SetPinDir+0x72>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	09 f0       	breq	.+2      	; 0x86 <DIO_SetPinDir+0xa>
  84:	6b c0       	rjmp	.+214    	; 0x15c <DIO_SetPinDir+0xe0>
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_SetPinDir+0x30>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_SetPinDir+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_SetPinDir+0x46>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_SetPinDir+0x5c>
  94:	08 95       	ret
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPinDir+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPinDir+0x22>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	08 95       	ret
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinDir+0x3c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinDir+0x38>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
  c0:	08 95       	ret
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinDir+0x52>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinDir+0x4e>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
  d6:	08 95       	ret
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPinDir+0x68>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPinDir+0x64>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
  ec:	08 95       	ret
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 f0       	breq	.+36     	; 0x116 <DIO_SetPinDir+0x9a>
  f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_SetPinDir+0x82>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d9 f0       	breq	.+54     	; 0x12e <DIO_SetPinDir+0xb2>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <DIO_SetPinDir+0xca>
  fc:	08 95       	ret
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPinDir+0x8e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPinDir+0x8a>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
 114:	08 95       	ret
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPinDir+0xa6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPinDir+0xa2>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
 12c:	08 95       	ret
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDir+0xbe>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDir+0xba>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
 144:	08 95       	ret
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SetPinDir+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SetPinDir+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <DIO_TogglePin>:
		default:
		break;
	}
}
void DIO_TogglePin(uint8 port,uint8 pin){
	switch(port){
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	89 f0       	breq	.+34     	; 0x184 <DIO_TogglePin+0x26>
 162:	28 f0       	brcs	.+10     	; 0x16e <DIO_TogglePin+0x10>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	c9 f0       	breq	.+50     	; 0x19a <DIO_TogglePin+0x3c>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	11 f1       	breq	.+68     	; 0x1b0 <DIO_TogglePin+0x52>
 16c:	08 95       	ret
		case DIO_PORTA:
		Toggle_BIT(PORTA,pin);
 16e:	2b b3       	in	r18, 0x1b	; 27
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_TogglePin+0x1c>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_TogglePin+0x18>
 17e:	82 27       	eor	r24, r18
 180:	8b bb       	out	0x1b, r24	; 27
		break;
 182:	08 95       	ret

		case DIO_PORTB:
		Toggle_BIT(PORTB,pin);
 184:	28 b3       	in	r18, 0x18	; 24
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_TogglePin+0x32>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_TogglePin+0x2e>
 194:	82 27       	eor	r24, r18
 196:	88 bb       	out	0x18, r24	; 24
		break;
 198:	08 95       	ret

		case DIO_PORTC:
		Toggle_BIT(PORTC,pin);
 19a:	25 b3       	in	r18, 0x15	; 21
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_TogglePin+0x48>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_TogglePin+0x44>
 1aa:	82 27       	eor	r24, r18
 1ac:	85 bb       	out	0x15, r24	; 21
		break;
 1ae:	08 95       	ret

		case DIO_PORTD:
		Toggle_BIT(PORTD,pin);
 1b0:	22 b3       	in	r18, 0x12	; 18
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_TogglePin+0x5e>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_TogglePin+0x5a>
 1c0:	82 27       	eor	r24, r18
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	08 95       	ret

000001c6 <main>:


int main(void)
{
    uint8 tx_data=2, rx_data=0;
	DIO_SetPinDir(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTC,DIO_PIN3,DIO_PIN_OUTPUT);
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	63 e0       	ldi	r22, 0x03	; 3
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDir>
	SPI_Slave_Init();
 1da:	0e 94 09 01 	call	0x212	; 0x212 <SPI_Slave_Init>
    while (1) 
    {
		rx_data=SPI_TranSiver(tx_data);
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	0e 94 20 01 	call	0x240	; 0x240 <SPI_TranSiver>
		if(rx_data==5){
 1e4:	85 30       	cpi	r24, 0x05	; 5
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <main+0x2c>
			DIO_TogglePin(DIO_PORTC,DIO_PIN2);
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_TogglePin>
 1f0:	06 c0       	rjmp	.+12     	; 0x1fe <main+0x38>
			rx_data=0;
		}
		if(rx_data==6){
 1f2:	86 30       	cpi	r24, 0x06	; 6
 1f4:	21 f4       	brne	.+8      	; 0x1fe <main+0x38>
			DIO_TogglePin(DIO_PORTC,DIO_PIN3);
 1f6:	63 e0       	ldi	r22, 0x03	; 3
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_TogglePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	89 e6       	ldi	r24, 0x69	; 105
 202:	98 e1       	ldi	r25, 0x18	; 24
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <main+0x3e>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <main+0x48>
 20e:	00 00       	nop
 210:	e6 cf       	rjmp	.-52     	; 0x1de <main+0x18>

00000212 <SPI_Slave_Init>:
 void SPI_Master_InitTrans(void){
 DIO_WritePin(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
 }
 //terminate transimition
 void SPI_Master_TerTrans(void){
  DIO_WritePin(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	64 e0       	ldi	r22, 0x04	; 4
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDir>
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	65 e0       	ldi	r22, 0x05	; 5
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDir>
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	66 e0       	ldi	r22, 0x06	; 6
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDir>
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	67 e0       	ldi	r22, 0x07	; 7
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDir>
 23a:	80 e4       	ldi	r24, 0x40	; 64
 23c:	8d b9       	out	0x0d, r24	; 13
 23e:	08 95       	ret

00000240 <SPI_TranSiver>:
 }
 //transmite and receive
 uint8 SPI_TranSiver(uint8 trans_data){
 uint8 rec_data=0;
 SPI ->SPDR=trans_data;//data need to be send
 240:	8f b9       	out	0x0f, r24	; 15

 while(GET_BIT(SPI->SPSR,7)==0);//once 1 means transmite done
 242:	77 9b       	sbis	0x0e, 7	; 14
 244:	fe cf       	rjmp	.-4      	; 0x242 <SPI_TranSiver+0x2>

 rec_data=SPI->SPDR;
 246:	8f b1       	in	r24, 0x0f	; 15
 return rec_data;
 248:	08 95       	ret

0000024a <__vector_11>:
 OCR1AL=Num_Ticks-1;
 Compare_Match=1;
 }
 }
 void Timer1_SetCallBack(void (*p)(void)){
 timer1_ptr=p;
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
 26c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counter.1670>
 270:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <counter.1670+0x1>
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <counter.1670+0x1>
 27a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <counter.1670>
 27e:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <Num_OverFlow>
 282:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <Num_OverFlow+0x1>
 286:	82 17       	cp	r24, r18
 288:	93 07       	cpc	r25, r19
 28a:	61 f4       	brne	.+24     	; 0x2a4 <__vector_11+0x5a>
 28c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Init_Value>
 290:	82 bf       	out	0x32, r24	; 50
 292:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <counter.1670+0x1>
 296:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counter.1670>
 29a:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <pp>
 29e:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <pp+0x1>
 2a2:	09 95       	icall
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	7f 91       	pop	r23
 2b2:	6f 91       	pop	r22
 2b4:	5f 91       	pop	r21
 2b6:	4f 91       	pop	r20
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__vector_7>:
 }
 ISR(TIMER1_COMPA_vect){
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
 static uint32 count=0;
 count ++;
 2e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ec:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2f0:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2f4:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	a1 1d       	adc	r26, r1
 2fc:	b1 1d       	adc	r27, r1
 2fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 302:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 306:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 30a:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 if(count==Compare_Match){
 30e:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <Compare_Match>
 312:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <Compare_Match+0x1>
 316:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <Compare_Match+0x2>
 31a:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <Compare_Match+0x3>
 31e:	84 17       	cp	r24, r20
 320:	95 07       	cpc	r25, r21
 322:	a6 07       	cpc	r26, r22
 324:	b7 07       	cpc	r27, r23
 326:	69 f4       	brne	.+26     	; 0x342 <__vector_7+0x7c>
 count=0;
 328:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 32c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 330:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 334:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 (*timer1_ptr)();
 338:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <timer1_ptr>
 33c:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <timer1_ptr+0x1>
 340:	09 95       	icall
 }

 }
 342:	ff 91       	pop	r31
 344:	ef 91       	pop	r30
 346:	bf 91       	pop	r27
 348:	af 91       	pop	r26
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	7f 91       	pop	r23
 350:	6f 91       	pop	r22
 352:	5f 91       	pop	r21
 354:	4f 91       	pop	r20
 356:	3f 91       	pop	r19
 358:	2f 91       	pop	r18
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
