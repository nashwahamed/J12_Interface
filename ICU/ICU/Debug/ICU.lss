
ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000968  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000968  000009fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  0080007a  0080007a  00000a16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000153d  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f3  00000000  00000000  00002159  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b5e  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  000035ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000679  00000000  00000000  000039c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c78  00000000  00000000  0000403d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00004cb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__vector_6>
  1c:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 21 03 	jmp	0x642	; 0x642 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 39       	cpi	r26, 0x9B	; 155
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b2 02 	call	0x564	; 0x564 <main>
  8a:	0c 94 b2 04 	jmp	0x964	; 0x964 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDir>:

		break;

	case DIO_PORTD :

		PORTD = Val;
  92:	44 23       	and	r20, r20
  94:	b9 f1       	breq	.+110    	; 0x104 <DIO_SetPinDir+0x72>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	09 f0       	breq	.+2      	; 0x9c <DIO_SetPinDir+0xa>
  9a:	6b c0       	rjmp	.+214    	; 0x172 <DIO_SetPinDir+0xe0>
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	89 f0       	breq	.+34     	; 0xc2 <DIO_SetPinDir+0x30>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPinDir+0x1a>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	c9 f0       	breq	.+50     	; 0xd8 <DIO_SetPinDir+0x46>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	11 f1       	breq	.+68     	; 0xee <DIO_SetPinDir+0x5c>
  aa:	08 95       	ret
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinDir+0x26>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinDir+0x22>
  bc:	82 2b       	or	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret
  c2:	27 b3       	in	r18, 0x17	; 23
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinDir+0x3c>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinDir+0x38>
  d2:	82 2b       	or	r24, r18
  d4:	87 bb       	out	0x17, r24	; 23
  d6:	08 95       	ret
  d8:	24 b3       	in	r18, 0x14	; 20
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPinDir+0x52>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPinDir+0x4e>
  e8:	82 2b       	or	r24, r18
  ea:	84 bb       	out	0x14, r24	; 20
  ec:	08 95       	ret
  ee:	21 b3       	in	r18, 0x11	; 17
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDir+0x68>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDir+0x64>
  fe:	82 2b       	or	r24, r18
 100:	81 bb       	out	0x11, r24	; 17
 102:	08 95       	ret
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 f0       	breq	.+36     	; 0x12c <DIO_SetPinDir+0x9a>
 108:	28 f0       	brcs	.+10     	; 0x114 <DIO_SetPinDir+0x82>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	d9 f0       	breq	.+54     	; 0x144 <DIO_SetPinDir+0xb2>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	29 f1       	breq	.+74     	; 0x15c <DIO_SetPinDir+0xca>
 112:	08 95       	ret
 114:	2a b3       	in	r18, 0x1a	; 26
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_SetPinDir+0x8e>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_SetPinDir+0x8a>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	8a bb       	out	0x1a, r24	; 26
 12a:	08 95       	ret
 12c:	27 b3       	in	r18, 0x17	; 23
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_SetPinDir+0xa6>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_SetPinDir+0xa2>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	87 bb       	out	0x17, r24	; 23
 142:	08 95       	ret
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_SetPinDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_SetPinDir+0xba>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	84 bb       	out	0x14, r24	; 20
 15a:	08 95       	ret
 15c:	21 b3       	in	r18, 0x11	; 17
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_SetPinDir+0xd6>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_SetPinDir+0xd2>
 16c:	80 95       	com	r24
 16e:	82 23       	and	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret

00000174 <DIO_WritePin>:



void DIO_WritePin(uint8 Port ,uint8 Pin, uint8 Val)
{
	switch (Val)
 174:	44 23       	and	r20, r20
 176:	b9 f1       	breq	.+110    	; 0x1e6 <DIO_WritePin+0x72>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	09 f0       	breq	.+2      	; 0x17e <DIO_WritePin+0xa>
 17c:	6b c0       	rjmp	.+214    	; 0x254 <DIO_WritePin+0xe0>


	case DIO_PIN_HIGH :


		switch (Port)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	89 f0       	breq	.+34     	; 0x1a4 <DIO_WritePin+0x30>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_WritePin+0x1a>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	c9 f0       	breq	.+50     	; 0x1ba <DIO_WritePin+0x46>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	11 f1       	breq	.+68     	; 0x1d0 <DIO_WritePin+0x5c>
 18c:	08 95       	ret
		{
		case DIO_PORTA :

			SET_BIT(PORTA,Pin);
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_WritePin+0x26>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_WritePin+0x22>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27

			break;
 1a2:	08 95       	ret

		case DIO_PORTB :

			SET_BIT(PORTB,Pin);
 1a4:	28 b3       	in	r18, 0x18	; 24
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_WritePin+0x3c>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_WritePin+0x38>
 1b4:	82 2b       	or	r24, r18
 1b6:	88 bb       	out	0x18, r24	; 24

			break;
 1b8:	08 95       	ret

		case DIO_PORTC :

			SET_BIT(PORTC,Pin);
 1ba:	25 b3       	in	r18, 0x15	; 21
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_WritePin+0x52>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_WritePin+0x4e>
 1ca:	82 2b       	or	r24, r18
 1cc:	85 bb       	out	0x15, r24	; 21

			break;
 1ce:	08 95       	ret

		case DIO_PORTD :

			SET_BIT(PORTD,Pin);
 1d0:	22 b3       	in	r18, 0x12	; 18
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_WritePin+0x68>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_WritePin+0x64>
 1e0:	82 2b       	or	r24, r18
 1e2:	82 bb       	out	0x12, r24	; 18

			break;
 1e4:	08 95       	ret
		break;

		case DIO_PIN_LOW :


			switch (Port)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	91 f0       	breq	.+36     	; 0x20e <DIO_WritePin+0x9a>
 1ea:	28 f0       	brcs	.+10     	; 0x1f6 <DIO_WritePin+0x82>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	d9 f0       	breq	.+54     	; 0x226 <DIO_WritePin+0xb2>
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	29 f1       	breq	.+74     	; 0x23e <DIO_WritePin+0xca>
 1f4:	08 95       	ret
			{
			case DIO_PORTA :

				CLR_BIT(PORTA,Pin);
 1f6:	2b b3       	in	r18, 0x1b	; 27
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_WritePin+0x8e>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_WritePin+0x8a>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	8b bb       	out	0x1b, r24	; 27

				break;
 20c:	08 95       	ret

			case DIO_PORTB :

				CLR_BIT(PORTB,Pin);
 20e:	28 b3       	in	r18, 0x18	; 24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_WritePin+0xa6>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_WritePin+0xa2>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	88 bb       	out	0x18, r24	; 24

				break;
 224:	08 95       	ret

			case DIO_PORTC :

				CLR_BIT(PORTC,Pin);
 226:	25 b3       	in	r18, 0x15	; 21
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_WritePin+0xbe>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_WritePin+0xba>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	85 bb       	out	0x15, r24	; 21

				break;
 23c:	08 95       	ret

			case DIO_PORTD :

				CLR_BIT(PORTD,Pin);
 23e:	22 b3       	in	r18, 0x12	; 18
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_WritePin+0xd6>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_WritePin+0xd2>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <LCD_WriteCommand>:



void LCD_Clear(void)
{
	LCD_WriteCommand(0x01);
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 278:	8b b3       	in	r24, 0x1b	; 27
 27a:	9c 2f       	mov	r25, r28
 27c:	90 7f       	andi	r25, 0xF0	; 240
 27e:	8f 70       	andi	r24, 0x0F	; 15
 280:	89 2b       	or	r24, r25
 282:	8b bb       	out	0x1b, r24	; 27
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 28e:	8f e9       	ldi	r24, 0x9F	; 159
 290:	9f e0       	ldi	r25, 0x0F	; 15
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_WriteCommand+0x3c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_WriteCommand+0x42>
 298:	00 00       	nop
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 2a4:	2b b3       	in	r18, 0x1b	; 27
 2a6:	30 e1       	ldi	r19, 0x10	; 16
 2a8:	c3 9f       	mul	r28, r19
 2aa:	c0 01       	movw	r24, r0
 2ac:	11 24       	eor	r1, r1
 2ae:	92 2f       	mov	r25, r18
 2b0:	9f 70       	andi	r25, 0x0F	; 15
 2b2:	89 2b       	or	r24, r25
 2b4:	8b bb       	out	0x1b, r24	; 27
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	63 e0       	ldi	r22, 0x03	; 3
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 2c0:	8f e9       	ldi	r24, 0x9F	; 159
 2c2:	9f e0       	ldi	r25, 0x0F	; 15
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_WriteCommand+0x6e>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_WriteCommand+0x74>
 2ca:	00 00       	nop
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	63 e0       	ldi	r22, 0x03	; 3
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 2d6:	8f e1       	ldi	r24, 0x1F	; 31
 2d8:	9e e4       	ldi	r25, 0x4E	; 78
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_WriteCommand+0x84>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_WriteCommand+0x8a>
 2e0:	00 00       	nop
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <LCD_Init>:
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	64 e0       	ldi	r22, 0x04	; 4
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	65 e0       	ldi	r22, 0x05	; 5
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	66 e0       	ldi	r22, 0x06	; 6
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	67 e0       	ldi	r22, 0x07	; 7
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	81 ee       	ldi	r24, 0xE1	; 225
 330:	94 e0       	ldi	r25, 0x04	; 4
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <LCD_Init+0x4c>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <LCD_Init+0x56>
 33c:	00 00       	nop
 33e:	83 e3       	ldi	r24, 0x33	; 51
 340:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 344:	82 e3       	ldi	r24, 0x32	; 50
 346:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 34a:	88 e2       	ldi	r24, 0x28	; 40
 34c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 350:	8e e0       	ldi	r24, 0x0E	; 14
 352:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 368:	08 95       	ret

0000036a <LCD_WriteChar>:
 36a:	cf 93       	push	r28
 36c:	c8 2f       	mov	r28, r24
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	62 e0       	ldi	r22, 0x02	; 2
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	63 e0       	ldi	r22, 0x03	; 3
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 38c:	8c 2f       	mov	r24, r28
 38e:	80 7f       	andi	r24, 0xF0	; 240
 390:	8b bb       	out	0x1b, r24	; 27
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	63 e0       	ldi	r22, 0x03	; 3
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 39c:	8f e9       	ldi	r24, 0x9F	; 159
 39e:	9f e0       	ldi	r25, 0x0F	; 15
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <LCD_WriteChar+0x36>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <LCD_WriteChar+0x3c>
 3a6:	00 00       	nop
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	63 e0       	ldi	r22, 0x03	; 3
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 3b2:	c2 95       	swap	r28
 3b4:	c0 7f       	andi	r28, 0xF0	; 240
 3b6:	cb bb       	out	0x1b, r28	; 27
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	63 e0       	ldi	r22, 0x03	; 3
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 3c2:	8f e9       	ldi	r24, 0x9F	; 159
 3c4:	9f e0       	ldi	r25, 0x0F	; 15
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCD_WriteChar+0x5c>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <LCD_WriteChar+0x62>
 3cc:	00 00       	nop
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	63 e0       	ldi	r22, 0x03	; 3
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 3d8:	8f e1       	ldi	r24, 0x1F	; 31
 3da:	9e e4       	ldi	r25, 0x4E	; 78
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <LCD_WriteChar+0x72>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LCD_WriteChar+0x78>
 3e2:	00 00       	nop
 3e4:	cf 91       	pop	r28
 3e6:	08 95       	ret

000003e8 <LCD_WriteString>:
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	fc 01       	movw	r30, r24
 3f0:	80 81       	ld	r24, Z
 3f2:	88 23       	and	r24, r24
 3f4:	59 f0       	breq	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f6:	8f 01       	movw	r16, r30
 3f8:	c0 e0       	ldi	r28, 0x00	; 0
 3fa:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_WriteChar>
 3fe:	cf 5f       	subi	r28, 0xFF	; 255
 400:	f8 01       	movw	r30, r16
 402:	ec 0f       	add	r30, r28
 404:	f1 1d       	adc	r31, r1
 406:	80 81       	ld	r24, Z
 408:	81 11       	cpse	r24, r1
 40a:	f7 cf       	rjmp	.-18     	; 0x3fa <LCD_WriteString+0x12>
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	08 95       	ret

00000414 <LCD_GoTo>:
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	00 d0       	rcall	.+0      	; 0x41a <LCD_GoTo+0x6>
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	90 e8       	ldi	r25, 0x80	; 128
 420:	99 83       	std	Y+1, r25	; 0x01
 422:	90 ec       	ldi	r25, 0xC0	; 192
 424:	9a 83       	std	Y+2, r25	; 0x02
 426:	fe 01       	movw	r30, r28
 428:	e8 0f       	add	r30, r24
 42a:	f1 1d       	adc	r31, r1
 42c:	81 81       	ldd	r24, Z+1	; 0x01
 42e:	86 0f       	add	r24, r22
 430:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <LCD_WriteInteger>:
}

 void LCD_WriteInteger(sint32 number){
 43e:	4f 92       	push	r4
 440:	5f 92       	push	r5
 442:	6f 92       	push	r6
 444:	7f 92       	push	r7
 446:	8f 92       	push	r8
 448:	9f 92       	push	r9
 44a:	af 92       	push	r10
 44c:	bf 92       	push	r11
 44e:	cf 92       	push	r12
 450:	df 92       	push	r13
 452:	ef 92       	push	r14
 454:	ff 92       	push	r15
 456:	0f 93       	push	r16
 458:	1f 93       	push	r17
 45a:	4b 01       	movw	r8, r22
 45c:	5c 01       	movw	r10, r24
 //uint8 arrSize=0;
 //uint8* arr=NULL;
 sint32 temp=1;
 uint8 negative=number<0?1:0;
  if(negative){
 45e:	99 23       	and	r25, r25
 460:	5c f4       	brge	.+22     	; 0x478 <LCD_WriteInteger+0x3a>
	  LCD_WriteChar(45);
 462:	8d e2       	ldi	r24, 0x2D	; 45
 464:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_WriteChar>
	  number*=-1;
 468:	b0 94       	com	r11
 46a:	a0 94       	com	r10
 46c:	90 94       	com	r9
 46e:	80 94       	com	r8
 470:	81 1c       	adc	r8, r1
 472:	91 1c       	adc	r9, r1
 474:	a1 1c       	adc	r10, r1
 476:	b1 1c       	adc	r11, r1

 while(arrSize>=0){
 LCD_WriteChar(arr[arrSize]);
 arrSize--;
 }*/
 while(number%10){
 478:	c5 01       	movw	r24, r10
 47a:	b4 01       	movw	r22, r8
 47c:	2a e0       	ldi	r18, 0x0A	; 10
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	40 e0       	ldi	r20, 0x00	; 0
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__divmodsi4>
 488:	61 15       	cp	r22, r1
 48a:	71 05       	cpc	r23, r1
 48c:	81 05       	cpc	r24, r1
 48e:	91 05       	cpc	r25, r1
 490:	09 f4       	brne	.+2      	; 0x494 <LCD_WriteInteger+0x56>
 492:	59 c0       	rjmp	.+178    	; 0x546 <LCD_WriteInteger+0x108>
 494:	c1 2c       	mov	r12, r1
 496:	d1 2c       	mov	r13, r1
 498:	76 01       	movw	r14, r12
 49a:	c3 94       	inc	r12
	 
	 temp=((number%10) + (temp*10));
	 number/=10;
 49c:	0f 2e       	mov	r0, r31
 49e:	fa e0       	ldi	r31, 0x0A	; 10
 4a0:	4f 2e       	mov	r4, r31
 4a2:	51 2c       	mov	r5, r1
 4a4:	61 2c       	mov	r6, r1
 4a6:	71 2c       	mov	r7, r1
 4a8:	f0 2d       	mov	r31, r0
 LCD_WriteChar(arr[arrSize]);
 arrSize--;
 }*/
 while(number%10){
	 
	 temp=((number%10) + (temp*10));
 4aa:	cc 0c       	add	r12, r12
 4ac:	dd 1c       	adc	r13, r13
 4ae:	ee 1c       	adc	r14, r14
 4b0:	ff 1c       	adc	r15, r15
 4b2:	97 01       	movw	r18, r14
 4b4:	86 01       	movw	r16, r12
 4b6:	00 0f       	add	r16, r16
 4b8:	11 1f       	adc	r17, r17
 4ba:	22 1f       	adc	r18, r18
 4bc:	33 1f       	adc	r19, r19
 4be:	00 0f       	add	r16, r16
 4c0:	11 1f       	adc	r17, r17
 4c2:	22 1f       	adc	r18, r18
 4c4:	33 1f       	adc	r19, r19
 4c6:	c0 0e       	add	r12, r16
 4c8:	d1 1e       	adc	r13, r17
 4ca:	e2 1e       	adc	r14, r18
 4cc:	f3 1e       	adc	r15, r19
 4ce:	c6 0e       	add	r12, r22
 4d0:	d7 1e       	adc	r13, r23
 4d2:	e8 1e       	adc	r14, r24
 4d4:	f9 1e       	adc	r15, r25
	 number/=10;
 4d6:	c5 01       	movw	r24, r10
 4d8:	b4 01       	movw	r22, r8
 4da:	a3 01       	movw	r20, r6
 4dc:	92 01       	movw	r18, r4
 4de:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__divmodsi4>
 4e2:	49 01       	movw	r8, r18
 4e4:	5a 01       	movw	r10, r20

 while(arrSize>=0){
 LCD_WriteChar(arr[arrSize]);
 arrSize--;
 }*/
 while(number%10){
 4e6:	ca 01       	movw	r24, r20
 4e8:	b9 01       	movw	r22, r18
 4ea:	a3 01       	movw	r20, r6
 4ec:	92 01       	movw	r18, r4
 4ee:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__divmodsi4>
 4f2:	61 15       	cp	r22, r1
 4f4:	71 05       	cpc	r23, r1
 4f6:	81 05       	cpc	r24, r1
 4f8:	91 05       	cpc	r25, r1
 4fa:	b9 f6       	brne	.-82     	; 0x4aa <LCD_WriteInteger+0x6c>
	 
	 temp=((number%10) + (temp*10));
	 number/=10;
 }
 while(temp >1){
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	c8 16       	cp	r12, r24
 500:	d1 04       	cpc	r13, r1
 502:	e1 04       	cpc	r14, r1
 504:	f1 04       	cpc	r15, r1
 506:	fc f0       	brlt	.+62     	; 0x546 <LCD_WriteInteger+0x108>
 LCD_WriteChar((temp%10)+48);
 508:	0f 2e       	mov	r0, r31
 50a:	fa e0       	ldi	r31, 0x0A	; 10
 50c:	4f 2e       	mov	r4, r31
 50e:	51 2c       	mov	r5, r1
 510:	61 2c       	mov	r6, r1
 512:	71 2c       	mov	r7, r1
 514:	f0 2d       	mov	r31, r0
 516:	c7 01       	movw	r24, r14
 518:	b6 01       	movw	r22, r12
 51a:	a3 01       	movw	r20, r6
 51c:	92 01       	movw	r18, r4
 51e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__divmodsi4>
 522:	82 2e       	mov	r8, r18
 524:	93 2e       	mov	r9, r19
 526:	a4 2e       	mov	r10, r20
 528:	b5 2e       	mov	r11, r21
 52a:	80 e3       	ldi	r24, 0x30	; 48
 52c:	86 0f       	add	r24, r22
 52e:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_WriteChar>
 temp/=10;
 532:	c8 2c       	mov	r12, r8
 534:	d9 2c       	mov	r13, r9
 536:	ea 2c       	mov	r14, r10
 538:	fb 2c       	mov	r15, r11
 while(number%10){
	 
	 temp=((number%10) + (temp*10));
	 number/=10;
 }
 while(temp >1){
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	c8 16       	cp	r12, r24
 53e:	d1 04       	cpc	r13, r1
 540:	e1 04       	cpc	r14, r1
 542:	f1 04       	cpc	r15, r1
 544:	44 f7       	brge	.-48     	; 0x516 <LCD_WriteInteger+0xd8>
 LCD_WriteChar((temp%10)+48);
 temp/=10;
 }
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	ef 90       	pop	r14
 54e:	df 90       	pop	r13
 550:	cf 90       	pop	r12
 552:	bf 90       	pop	r11
 554:	af 90       	pop	r10
 556:	9f 90       	pop	r9
 558:	8f 90       	pop	r8
 55a:	7f 90       	pop	r7
 55c:	6f 90       	pop	r6
 55e:	5f 90       	pop	r5
 560:	4f 90       	pop	r4
 562:	08 95       	ret

00000564 <main>:
int main(void)
{
    /* Replace with your application code */
	uint32 duty=0;
	uint32 freq=0;
	LCD_Init();
 564:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_Init>

	PWM2_Init();
 568:	0e 94 bb 03 	call	0x776	; 0x776 <PWM2_Init>
	PWM2_Generate(70);
 56c:	66 e4       	ldi	r22, 0x46	; 70
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 c0 03 	call	0x780	; 0x780 <PWM2_Generate>

	ICU_Init();
 578:	0e 94 ae 03 	call	0x75c	; 0x75c <ICU_Init>
		LCD_WriteInteger(duty);
		LCD_WriteChar('%');

		LCD_GoTo(1,0);
		LCD_WriteString("Frequency:");
		LCD_WriteInteger(freq);
 57c:	0f 2e       	mov	r0, r31
 57e:	81 2c       	mov	r8, r1
 580:	f2 e1       	ldi	r31, 0x12	; 18
 582:	9f 2e       	mov	r9, r31
 584:	fa e7       	ldi	r31, 0x7A	; 122
 586:	af 2e       	mov	r10, r31
 588:	b1 2c       	mov	r11, r1
 58a:	f0 2d       	mov	r31, r0
	PWM2_Generate(70);

	ICU_Init();
    while (1) 
    {
		if(Cap_Counter ==3){
 58c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Cap_Counter>
 590:	83 30       	cpi	r24, 0x03	; 3
 592:	f1 f7       	brne	.-4      	; 0x590 <main+0x2c>
		duty =((ICU_ReadCaptureVal_2-ICU_ReadCaptureVal_1)*100)/(ICU_ReadCaptureVal_3-ICU_ReadCaptureVal_1);
 594:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <ICU_ReadCaptureVal_1>
 598:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <ICU_ReadCaptureVal_1+0x1>
 59c:	a0 91 8b 00 	lds	r26, 0x008B	; 0x80008b <ICU_ReadCaptureVal_1+0x2>
 5a0:	b0 91 8c 00 	lds	r27, 0x008C	; 0x80008c <ICU_ReadCaptureVal_1+0x3>
 5a4:	c0 90 81 00 	lds	r12, 0x0081	; 0x800081 <ICU_ReadCaptureVal_3>
 5a8:	d0 90 82 00 	lds	r13, 0x0082	; 0x800082 <ICU_ReadCaptureVal_3+0x1>
 5ac:	e0 90 83 00 	lds	r14, 0x0083	; 0x800083 <ICU_ReadCaptureVal_3+0x2>
 5b0:	f0 90 84 00 	lds	r15, 0x0084	; 0x800084 <ICU_ReadCaptureVal_3+0x3>
 5b4:	c8 1a       	sub	r12, r24
 5b6:	d9 0a       	sbc	r13, r25
 5b8:	ea 0a       	sbc	r14, r26
 5ba:	fb 0a       	sbc	r15, r27
 5bc:	40 91 85 00 	lds	r20, 0x0085	; 0x800085 <ICU_ReadCaptureVal_2>
 5c0:	50 91 86 00 	lds	r21, 0x0086	; 0x800086 <ICU_ReadCaptureVal_2+0x1>
 5c4:	60 91 87 00 	lds	r22, 0x0087	; 0x800087 <ICU_ReadCaptureVal_2+0x2>
 5c8:	70 91 88 00 	lds	r23, 0x0088	; 0x800088 <ICU_ReadCaptureVal_2+0x3>
 5cc:	9a 01       	movw	r18, r20
 5ce:	ab 01       	movw	r20, r22
 5d0:	28 1b       	sub	r18, r24
 5d2:	39 0b       	sbc	r19, r25
 5d4:	4a 0b       	sbc	r20, r26
 5d6:	5b 0b       	sbc	r21, r27
 5d8:	a4 e6       	ldi	r26, 0x64	; 100
 5da:	b0 e0       	ldi	r27, 0x00	; 0
 5dc:	0e 94 a7 04 	call	0x94e	; 0x94e <__muluhisi3>
 5e0:	a7 01       	movw	r20, r14
 5e2:	96 01       	movw	r18, r12
 5e4:	0e 94 57 04 	call	0x8ae	; 0x8ae <__udivmodsi4>
 5e8:	29 01       	movw	r4, r18
 5ea:	3a 01       	movw	r6, r20
		freq= (8000000/(ICU_ReadCaptureVal_3-ICU_ReadCaptureVal_1));
		LCD_GoTo(0,0);
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_GoTo>
		LCD_WriteString("Duty Cycle:");
 5f4:	80 e6       	ldi	r24, 0x60	; 96
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_WriteString>
		LCD_WriteInteger(duty);
 5fc:	c3 01       	movw	r24, r6
 5fe:	b2 01       	movw	r22, r4
 600:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_WriteInteger>
		LCD_WriteChar('%');
 604:	85 e2       	ldi	r24, 0x25	; 37
 606:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_WriteChar>

		LCD_GoTo(1,0);
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_GoTo>
		LCD_WriteString("Frequency:");
 612:	8c e6       	ldi	r24, 0x6C	; 108
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_WriteString>
		LCD_WriteInteger(freq);
 61a:	c5 01       	movw	r24, r10
 61c:	b4 01       	movw	r22, r8
 61e:	a7 01       	movw	r20, r14
 620:	96 01       	movw	r18, r12
 622:	0e 94 57 04 	call	0x8ae	; 0x8ae <__udivmodsi4>
 626:	ca 01       	movw	r24, r20
 628:	b9 01       	movw	r22, r18
 62a:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_WriteInteger>
		LCD_WriteString("HZ");
 62e:	87 e7       	ldi	r24, 0x77	; 119
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_WriteString>
		Cap_Counter=0;
 636:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <Cap_Counter>
		SET_BIT(TIMSK,5);
 63a:	89 b7       	in	r24, 0x39	; 57
 63c:	80 62       	ori	r24, 0x20	; 32
 63e:	89 bf       	out	0x39, r24	; 57
 640:	a5 cf       	rjmp	.-182    	; 0x58c <main+0x28>

00000642 <__vector_11>:
 void PWM1_Generate(uint16 DutyCycle){
 OCR1AL= ((DutyCycle* 1250)/100)-1;
 }
 void PWM1_Start(void){
 //prescalar 256
 TCCR1B |=0x04;
 642:	1f 92       	push	r1
 644:	0f 92       	push	r0
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	0f 92       	push	r0
 64a:	11 24       	eor	r1, r1
 64c:	2f 93       	push	r18
 64e:	3f 93       	push	r19
 650:	4f 93       	push	r20
 652:	5f 93       	push	r21
 654:	6f 93       	push	r22
 656:	7f 93       	push	r23
 658:	8f 93       	push	r24
 65a:	9f 93       	push	r25
 65c:	af 93       	push	r26
 65e:	bf 93       	push	r27
 660:	ef 93       	push	r30
 662:	ff 93       	push	r31
 664:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <counter.1682>
 668:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <counter.1682+0x1>
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <counter.1682+0x1>
 672:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <counter.1682>
 676:	20 91 99 00 	lds	r18, 0x0099	; 0x800099 <Num_OverFlow>
 67a:	30 91 9a 00 	lds	r19, 0x009A	; 0x80009a <Num_OverFlow+0x1>
 67e:	82 17       	cp	r24, r18
 680:	93 07       	cpc	r25, r19
 682:	61 f4       	brne	.+24     	; 0x69c <__vector_11+0x5a>
 684:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <Init_Value>
 688:	82 bf       	out	0x32, r24	; 50
 68a:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <counter.1682+0x1>
 68e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <counter.1682>
 692:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <pp>
 696:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <pp+0x1>
 69a:	09 95       	icall
 69c:	ff 91       	pop	r31
 69e:	ef 91       	pop	r30
 6a0:	bf 91       	pop	r27
 6a2:	af 91       	pop	r26
 6a4:	9f 91       	pop	r25
 6a6:	8f 91       	pop	r24
 6a8:	7f 91       	pop	r23
 6aa:	6f 91       	pop	r22
 6ac:	5f 91       	pop	r21
 6ae:	4f 91       	pop	r20
 6b0:	3f 91       	pop	r19
 6b2:	2f 91       	pop	r18
 6b4:	0f 90       	pop	r0
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	0f 90       	pop	r0
 6ba:	1f 90       	pop	r1
 6bc:	18 95       	reti

000006be <__vector_7>:
 6be:	1f 92       	push	r1
 6c0:	0f 92       	push	r0
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	0f 92       	push	r0
 6c6:	11 24       	eor	r1, r1
 6c8:	2f 93       	push	r18
 6ca:	3f 93       	push	r19
 6cc:	4f 93       	push	r20
 6ce:	5f 93       	push	r21
 6d0:	6f 93       	push	r22
 6d2:	7f 93       	push	r23
 6d4:	8f 93       	push	r24
 6d6:	9f 93       	push	r25
 6d8:	af 93       	push	r26
 6da:	bf 93       	push	r27
 6dc:	ef 93       	push	r30
 6de:	ff 93       	push	r31
 6e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 6e4:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 6e8:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <__data_end+0x2>
 6ec:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <__data_end+0x3>
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	a1 1d       	adc	r26, r1
 6f4:	b1 1d       	adc	r27, r1
 6f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
 6fa:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
 6fe:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <__data_end+0x2>
 702:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <__data_end+0x3>
 706:	40 91 93 00 	lds	r20, 0x0093	; 0x800093 <Compare_Match>
 70a:	50 91 94 00 	lds	r21, 0x0094	; 0x800094 <Compare_Match+0x1>
 70e:	60 91 95 00 	lds	r22, 0x0095	; 0x800095 <Compare_Match+0x2>
 712:	70 91 96 00 	lds	r23, 0x0096	; 0x800096 <Compare_Match+0x3>
 716:	84 17       	cp	r24, r20
 718:	95 07       	cpc	r25, r21
 71a:	a6 07       	cpc	r26, r22
 71c:	b7 07       	cpc	r27, r23
 71e:	69 f4       	brne	.+26     	; 0x73a <__vector_7+0x7c>
 720:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
 724:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__data_end+0x1>
 728:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end+0x2>
 72c:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__data_end+0x3>
 730:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <timer1_ptr>
 734:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <timer1_ptr+0x1>
 738:	09 95       	icall
 73a:	ff 91       	pop	r31
 73c:	ef 91       	pop	r30
 73e:	bf 91       	pop	r27
 740:	af 91       	pop	r26
 742:	9f 91       	pop	r25
 744:	8f 91       	pop	r24
 746:	7f 91       	pop	r23
 748:	6f 91       	pop	r22
 74a:	5f 91       	pop	r21
 74c:	4f 91       	pop	r20
 74e:	3f 91       	pop	r19
 750:	2f 91       	pop	r18
 752:	0f 90       	pop	r0
 754:	0f be       	out	0x3f, r0	; 63
 756:	0f 90       	pop	r0
 758:	1f 90       	pop	r1
 75a:	18 95       	reti

0000075c <ICU_Init>:
 }

 void ICU_Init(void){
 CLR_BIT(DDRB,6);
 75c:	be 98       	cbi	0x17, 6	; 23
 ICR1=0x0000;
 75e:	17 bc       	out	0x27, r1	; 39
 760:	16 bc       	out	0x26, r1	; 38
  TCCR1B |=0x41;
 762:	8e b5       	in	r24, 0x2e	; 46
 764:	81 64       	ori	r24, 0x41	; 65
 766:	8e bd       	out	0x2e, r24	; 46

  TIMSK |=0x24;
 768:	89 b7       	in	r24, 0x39	; 57
 76a:	84 62       	ori	r24, 0x24	; 36
 76c:	89 bf       	out	0x39, r24	; 57
  SREG |=0x80;
 76e:	8f b7       	in	r24, 0x3f	; 63
 770:	80 68       	ori	r24, 0x80	; 128
 772:	8f bf       	out	0x3f, r24	; 63
 774:	08 95       	ret

00000776 <PWM2_Init>:
 }

 void PWM2_Init(void){
 DDRD |= 0x80;
 776:	8f 9a       	sbi	0x11, 7	; 17
 //pwm frequency 3906
 TCCR2 |=0x6A;
 778:	85 b5       	in	r24, 0x25	; 37
 77a:	8a 66       	ori	r24, 0x6A	; 106
 77c:	85 bd       	out	0x25, r24	; 37
 77e:	08 95       	ret

00000780 <PWM2_Generate>:


 }
 void PWM2_Generate(uint32 duty_cycle){
  OCR2=((duty_cycle*256)*100)-1;
 780:	8f ef       	ldi	r24, 0xFF	; 255
 782:	83 bd       	out	0x23, r24	; 35
 784:	08 95       	ret

00000786 <__vector_9>:
 }

 ISR(TIMER1_OVF_vect){
 786:	1f 92       	push	r1
 788:	0f 92       	push	r0
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	0f 92       	push	r0
 78e:	11 24       	eor	r1, r1
 790:	8f 93       	push	r24
 792:	9f 93       	push	r25
 Timer_Numer_Overfloe ++;
 794:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <Timer_Numer_Overfloe>
 798:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <Timer_Numer_Overfloe+0x1>
 79c:	01 96       	adiw	r24, 0x01	; 1
 79e:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <Timer_Numer_Overfloe+0x1>
 7a2:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <Timer_Numer_Overfloe>
 }
 7a6:	9f 91       	pop	r25
 7a8:	8f 91       	pop	r24
 7aa:	0f 90       	pop	r0
 7ac:	0f be       	out	0x3f, r0	; 63
 7ae:	0f 90       	pop	r0
 7b0:	1f 90       	pop	r1
 7b2:	18 95       	reti

000007b4 <__vector_6>:

 ISR(TIMER1_CAPT_vect){
 7b4:	1f 92       	push	r1
 7b6:	0f 92       	push	r0
 7b8:	0f b6       	in	r0, 0x3f	; 63
 7ba:	0f 92       	push	r0
 7bc:	11 24       	eor	r1, r1
 7be:	2f 93       	push	r18
 7c0:	3f 93       	push	r19
 7c2:	4f 93       	push	r20
 7c4:	5f 93       	push	r21
 7c6:	6f 93       	push	r22
 7c8:	7f 93       	push	r23
 7ca:	8f 93       	push	r24
 7cc:	9f 93       	push	r25
 7ce:	af 93       	push	r26
 7d0:	bf 93       	push	r27
 Cap_Counter++;
 7d2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Cap_Counter>
 7d6:	8f 5f       	subi	r24, 0xFF	; 255
 7d8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <Cap_Counter>
 if(Cap_Counter == 1){
 7dc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Cap_Counter>
 7e0:	81 30       	cpi	r24, 0x01	; 1
 7e2:	a1 f4       	brne	.+40     	; 0x80c <__vector_6+0x58>
 ICU_ReadCaptureVal_1=ICR1;
 7e4:	86 b5       	in	r24, 0x26	; 38
 7e6:	97 b5       	in	r25, 0x27	; 39
 7e8:	a0 e0       	ldi	r26, 0x00	; 0
 7ea:	b0 e0       	ldi	r27, 0x00	; 0
 7ec:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <ICU_ReadCaptureVal_1>
 7f0:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <ICU_ReadCaptureVal_1+0x1>
 7f4:	a0 93 8b 00 	sts	0x008B, r26	; 0x80008b <ICU_ReadCaptureVal_1+0x2>
 7f8:	b0 93 8c 00 	sts	0x008C, r27	; 0x80008c <ICU_ReadCaptureVal_1+0x3>
 CLR_BIT(TCCR1B,6);
 7fc:	8e b5       	in	r24, 0x2e	; 46
 7fe:	8f 7b       	andi	r24, 0xBF	; 191
 800:	8e bd       	out	0x2e, r24	; 46
 Timer_Numer_Overfloe=0;
 802:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <Timer_Numer_Overfloe+0x1>
 806:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <Timer_Numer_Overfloe>
 80a:	42 c0       	rjmp	.+132    	; 0x890 <__stack+0x31>
 }else if(Cap_Counter ==2){
 80c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Cap_Counter>
 810:	82 30       	cpi	r24, 0x02	; 2
 812:	e1 f4       	brne	.+56     	; 0x84c <__vector_6+0x98>
 ICU_ReadCaptureVal_2=ICR1+ (Timer_Numer_Overfloe*65535);
 814:	46 b5       	in	r20, 0x26	; 38
 816:	57 b5       	in	r21, 0x27	; 39
 818:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <Timer_Numer_Overfloe>
 81c:	30 91 8e 00 	lds	r19, 0x008E	; 0x80008e <Timer_Numer_Overfloe+0x1>
 820:	af ef       	ldi	r26, 0xFF	; 255
 822:	bf ef       	ldi	r27, 0xFF	; 255
 824:	0e 94 98 04 	call	0x930	; 0x930 <__umulhisi3>
 828:	dc 01       	movw	r26, r24
 82a:	cb 01       	movw	r24, r22
 82c:	84 0f       	add	r24, r20
 82e:	95 1f       	adc	r25, r21
 830:	a1 1d       	adc	r26, r1
 832:	b1 1d       	adc	r27, r1
 834:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <ICU_ReadCaptureVal_2>
 838:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <ICU_ReadCaptureVal_2+0x1>
 83c:	a0 93 87 00 	sts	0x0087, r26	; 0x800087 <ICU_ReadCaptureVal_2+0x2>
 840:	b0 93 88 00 	sts	0x0088, r27	; 0x800088 <ICU_ReadCaptureVal_2+0x3>
 SET_BIT(TCCR1B,6); //to detict rising
 844:	8e b5       	in	r24, 0x2e	; 46
 846:	80 64       	ori	r24, 0x40	; 64
 848:	8e bd       	out	0x2e, r24	; 46
 84a:	22 c0       	rjmp	.+68     	; 0x890 <__stack+0x31>
 }else if(Cap_Counter == 3){
 84c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Cap_Counter>
 850:	83 30       	cpi	r24, 0x03	; 3
 852:	f1 f4       	brne	.+60     	; 0x890 <__stack+0x31>
 ICU_ReadCaptureVal_3 = ICR1 + (Timer_Numer_Overfloe*65535);
 854:	46 b5       	in	r20, 0x26	; 38
 856:	57 b5       	in	r21, 0x27	; 39
 858:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <Timer_Numer_Overfloe>
 85c:	30 91 8e 00 	lds	r19, 0x008E	; 0x80008e <Timer_Numer_Overfloe+0x1>
 860:	af ef       	ldi	r26, 0xFF	; 255
 862:	bf ef       	ldi	r27, 0xFF	; 255
 864:	0e 94 98 04 	call	0x930	; 0x930 <__umulhisi3>
 868:	dc 01       	movw	r26, r24
 86a:	cb 01       	movw	r24, r22
 86c:	84 0f       	add	r24, r20
 86e:	95 1f       	adc	r25, r21
 870:	a1 1d       	adc	r26, r1
 872:	b1 1d       	adc	r27, r1
 874:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <ICU_ReadCaptureVal_3>
 878:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <ICU_ReadCaptureVal_3+0x1>
 87c:	a0 93 83 00 	sts	0x0083, r26	; 0x800083 <ICU_ReadCaptureVal_3+0x2>
 880:	b0 93 84 00 	sts	0x0084, r27	; 0x800084 <ICU_ReadCaptureVal_3+0x3>
 CLR_BIT(TCCR1B,6);
 884:	8e b5       	in	r24, 0x2e	; 46
 886:	8f 7b       	andi	r24, 0xBF	; 191
 888:	8e bd       	out	0x2e, r24	; 46
 CLR_BIT(TIMSK,5); //close interrupt till end calculation
 88a:	89 b7       	in	r24, 0x39	; 57
 88c:	8f 7d       	andi	r24, 0xDF	; 223
 88e:	89 bf       	out	0x39, r24	; 57
 }
 890:	bf 91       	pop	r27
 892:	af 91       	pop	r26
 894:	9f 91       	pop	r25
 896:	8f 91       	pop	r24
 898:	7f 91       	pop	r23
 89a:	6f 91       	pop	r22
 89c:	5f 91       	pop	r21
 89e:	4f 91       	pop	r20
 8a0:	3f 91       	pop	r19
 8a2:	2f 91       	pop	r18
 8a4:	0f 90       	pop	r0
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	0f 90       	pop	r0
 8aa:	1f 90       	pop	r1
 8ac:	18 95       	reti

000008ae <__udivmodsi4>:
 8ae:	a1 e2       	ldi	r26, 0x21	; 33
 8b0:	1a 2e       	mov	r1, r26
 8b2:	aa 1b       	sub	r26, r26
 8b4:	bb 1b       	sub	r27, r27
 8b6:	fd 01       	movw	r30, r26
 8b8:	0d c0       	rjmp	.+26     	; 0x8d4 <__udivmodsi4_ep>

000008ba <__udivmodsi4_loop>:
 8ba:	aa 1f       	adc	r26, r26
 8bc:	bb 1f       	adc	r27, r27
 8be:	ee 1f       	adc	r30, r30
 8c0:	ff 1f       	adc	r31, r31
 8c2:	a2 17       	cp	r26, r18
 8c4:	b3 07       	cpc	r27, r19
 8c6:	e4 07       	cpc	r30, r20
 8c8:	f5 07       	cpc	r31, r21
 8ca:	20 f0       	brcs	.+8      	; 0x8d4 <__udivmodsi4_ep>
 8cc:	a2 1b       	sub	r26, r18
 8ce:	b3 0b       	sbc	r27, r19
 8d0:	e4 0b       	sbc	r30, r20
 8d2:	f5 0b       	sbc	r31, r21

000008d4 <__udivmodsi4_ep>:
 8d4:	66 1f       	adc	r22, r22
 8d6:	77 1f       	adc	r23, r23
 8d8:	88 1f       	adc	r24, r24
 8da:	99 1f       	adc	r25, r25
 8dc:	1a 94       	dec	r1
 8de:	69 f7       	brne	.-38     	; 0x8ba <__udivmodsi4_loop>
 8e0:	60 95       	com	r22
 8e2:	70 95       	com	r23
 8e4:	80 95       	com	r24
 8e6:	90 95       	com	r25
 8e8:	9b 01       	movw	r18, r22
 8ea:	ac 01       	movw	r20, r24
 8ec:	bd 01       	movw	r22, r26
 8ee:	cf 01       	movw	r24, r30
 8f0:	08 95       	ret

000008f2 <__divmodsi4>:
 8f2:	05 2e       	mov	r0, r21
 8f4:	97 fb       	bst	r25, 7
 8f6:	1e f4       	brtc	.+6      	; 0x8fe <__divmodsi4+0xc>
 8f8:	00 94       	com	r0
 8fa:	0e 94 90 04 	call	0x920	; 0x920 <__negsi2>
 8fe:	57 fd       	sbrc	r21, 7
 900:	07 d0       	rcall	.+14     	; 0x910 <__divmodsi4_neg2>
 902:	0e 94 57 04 	call	0x8ae	; 0x8ae <__udivmodsi4>
 906:	07 fc       	sbrc	r0, 7
 908:	03 d0       	rcall	.+6      	; 0x910 <__divmodsi4_neg2>
 90a:	4e f4       	brtc	.+18     	; 0x91e <__divmodsi4_exit>
 90c:	0c 94 90 04 	jmp	0x920	; 0x920 <__negsi2>

00000910 <__divmodsi4_neg2>:
 910:	50 95       	com	r21
 912:	40 95       	com	r20
 914:	30 95       	com	r19
 916:	21 95       	neg	r18
 918:	3f 4f       	sbci	r19, 0xFF	; 255
 91a:	4f 4f       	sbci	r20, 0xFF	; 255
 91c:	5f 4f       	sbci	r21, 0xFF	; 255

0000091e <__divmodsi4_exit>:
 91e:	08 95       	ret

00000920 <__negsi2>:
 920:	90 95       	com	r25
 922:	80 95       	com	r24
 924:	70 95       	com	r23
 926:	61 95       	neg	r22
 928:	7f 4f       	sbci	r23, 0xFF	; 255
 92a:	8f 4f       	sbci	r24, 0xFF	; 255
 92c:	9f 4f       	sbci	r25, 0xFF	; 255
 92e:	08 95       	ret

00000930 <__umulhisi3>:
 930:	a2 9f       	mul	r26, r18
 932:	b0 01       	movw	r22, r0
 934:	b3 9f       	mul	r27, r19
 936:	c0 01       	movw	r24, r0
 938:	a3 9f       	mul	r26, r19
 93a:	70 0d       	add	r23, r0
 93c:	81 1d       	adc	r24, r1
 93e:	11 24       	eor	r1, r1
 940:	91 1d       	adc	r25, r1
 942:	b2 9f       	mul	r27, r18
 944:	70 0d       	add	r23, r0
 946:	81 1d       	adc	r24, r1
 948:	11 24       	eor	r1, r1
 94a:	91 1d       	adc	r25, r1
 94c:	08 95       	ret

0000094e <__muluhisi3>:
 94e:	0e 94 98 04 	call	0x930	; 0x930 <__umulhisi3>
 952:	a5 9f       	mul	r26, r21
 954:	90 0d       	add	r25, r0
 956:	b4 9f       	mul	r27, r20
 958:	90 0d       	add	r25, r0
 95a:	a4 9f       	mul	r26, r20
 95c:	80 0d       	add	r24, r0
 95e:	91 1d       	adc	r25, r1
 960:	11 24       	eor	r1, r1
 962:	08 95       	ret

00000964 <_exit>:
 964:	f8 94       	cli

00000966 <__stop_program>:
 966:	ff cf       	rjmp	.-2      	; 0x966 <__stop_program>
