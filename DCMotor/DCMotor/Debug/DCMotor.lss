
DCMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  00000210  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000088d  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000060b  00000000  00000000  00000bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003df  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  000015a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000460  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025f  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00001e1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 37       	cpi	r26, 0x72	; 114
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

#include <avr/io.h>


int main(void)
{
  7c:	ff cf       	rjmp	.-2      	; 0x7c <main>

0000007e <__vector_11>:
 OCR1AL=Num_Ticks-1;
 Compare_Match=1;
 }
 }
 void Timer1_SetCallBack(void (*p)(void)){
 timer1_ptr=p;
  7e:	1f 92       	push	r1
  80:	0f 92       	push	r0
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	2f 93       	push	r18
  8a:	3f 93       	push	r19
  8c:	4f 93       	push	r20
  8e:	5f 93       	push	r21
  90:	6f 93       	push	r22
  92:	7f 93       	push	r23
  94:	8f 93       	push	r24
  96:	9f 93       	push	r25
  98:	af 93       	push	r26
  9a:	bf 93       	push	r27
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
  a0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counter.1665>
  a4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <counter.1665+0x1>
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <counter.1665+0x1>
  ae:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <counter.1665>
  b2:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <Num_OverFlow>
  b6:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <Num_OverFlow+0x1>
  ba:	82 17       	cp	r24, r18
  bc:	93 07       	cpc	r25, r19
  be:	61 f4       	brne	.+24     	; 0xd8 <__vector_11+0x5a>
  c0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Init_Value>
  c4:	82 bf       	out	0x32, r24	; 50
  c6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <counter.1665+0x1>
  ca:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counter.1665>
  ce:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <pp>
  d2:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <pp+0x1>
  d6:	09 95       	icall
  d8:	ff 91       	pop	r31
  da:	ef 91       	pop	r30
  dc:	bf 91       	pop	r27
  de:	af 91       	pop	r26
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	7f 91       	pop	r23
  e6:	6f 91       	pop	r22
  e8:	5f 91       	pop	r21
  ea:	4f 91       	pop	r20
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_7>:
 }
 ISR(TIMER1_COMPA_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
 static uint32 count=0;
 count ++;
 11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 124:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 128:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	a1 1d       	adc	r26, r1
 130:	b1 1d       	adc	r27, r1
 132:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 136:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 13a:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 13e:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 if(count==Compare_Match){
 142:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <Compare_Match>
 146:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <Compare_Match+0x1>
 14a:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <Compare_Match+0x2>
 14e:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <Compare_Match+0x3>
 152:	84 17       	cp	r24, r20
 154:	95 07       	cpc	r25, r21
 156:	a6 07       	cpc	r26, r22
 158:	b7 07       	cpc	r27, r23
 15a:	69 f4       	brne	.+26     	; 0x176 <__vector_7+0x7c>
 count=0;
 15c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 160:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 164:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 168:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 (*timer1_ptr)();
 16c:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <timer1_ptr>
 170:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <timer1_ptr+0x1>
 174:	09 95       	icall
 }

 }
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
